* Puzzle Game
** Summary
Player moves pieces within constraints, board matches the moves. This repo contains a library
(puzzle-game) and a very basic demo to print the board, as well as a unit test suite.

The player pieces are single-sided mirrors, and are named for the Cartesian quadrant in which their
normal vectors point. For example, Q1 is a mirror that is oriented at a 45 degree angle with respect
to the base of the board. Its normal vector bisects the first quadrant, pointing to the top right
corner of the board. Q2 points to the top left, Q3 points to the bottom left, and Q4 points to the
bottom right.

Note the row and column indices are zero based, with r0c0 corresponding to the top left corner of
the board. r1c2 is the entry two columns to the right and 1 row down from r0c0. Pieces beginning
with capital letters are player pieces, pieces beginning with lower case letters are computer
pieces. Pieces called "X" are inert blockers, and the piece marked s is the target.

The light beam comes in from the bottom left square of the board (r3c0 below) and can be reflected
to hit the target. The demo configuration below shows a winning board.

#+BEGIN_EXAMPLE
    C0  C1  C2  C3
   +---+---+---+---+
R0 |   |q 2|   |   |
   +---+---+---+---+
R1 |q 1| X | s |   |
   +---+---+---+---+
R2 |Q 1|   |   |   |
   +---+---+---+---+
R3 |   |   |Q 2|   |
   +---+---+---+---+
#+END_EXAMPLE
** Command Line Arguments
There are currently only two command line arguments in the demo application: 
 - -h (Displays the help information)
 - -f <file> (takes a path to a board description file)

The "Default_Input.txt" file in the base directory is an example for the syntax.

In the absence of command line arguments, the application will use a default board configuration.
** Building
*** Prerequisites to Build
    - gtest and gtest_main (available in most Linux distros)
    - ninja (preferred) or make
    - A C++ compiler. This has been tested with clang++ 11.1.0, clang++ 3.8.1, and g++ 10.2.0.
*** To build on Linux
    See the ci_build shell script.
*** To build on Windows
    Haven't tested this repo yet, but since we're using cmake, it should be possible to download the
    Windows cmake generator to create Visual Studio solutions.
